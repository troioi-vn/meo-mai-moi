feat(frontend, docs): Overhaul documentation and enhance frontend features

This commit introduces a major refactoring of the project's documentation and implements significant enhancements to the frontend, build process, and backend configuration.

### Documentation Overhaul

-   **Refactor `GEMINI.md`:**
    -   Replaced the verbose user story format with a new, streamlined `roadmap.md` file using a list-based structure for clearer task tracking.
    -   Archived the old user stories in `tmp/user_stories.md`.
    -   Removed redundant sections: `Frontend File Structure`, `Known Issues`, and `Linting and Formatting Before Build`.
    -   Consolidated all build and execution commands into a single, unified `Command Glossary`.
-   **Update `README.md`:**
    -   Clarified the development workflow, distinguishing between `npm run dev`, `npm run build` (for local production), and `npm run build:docker`.

### Frontend Enhancements

-   **User Avatar Management:**
    -   Introduced a new `UserAvatar` component that handles image uploads, display, and deletion.
    -   Includes a fallback to display user initials if no avatar is set.
    -   Integrated into the `ProfilePage` and `UserMenu`.
-   **Cat Profile Management:**
    -   The `Cat` model now uses `birthday` (a string) instead of `age`, with a client-side utility to calculate the age dynamically. This allows for more flexible date handling.
    -   Implemented `CatProfilePage` and `CreateCatPage` to allow creating and editing cat profiles with the new birthday field.
-   **Build Process:**
    -   Added a `build:docker` script to the frontend `package.json` specifically for containerized builds, which streamlines the Docker deployment process.
    -   The standard `npm run build` script is now configured for local production builds, copying assets directly to the Laravel backend.

### Backend & Configuration

-   **Dockerfile:**
    -   Updated the backend Dockerfile to use the new `build:docker` script.
    -   Added the `intl` PHP extension.
    -   Included `php artisan storage:link` to ensure user uploads are publicly accessible.
-   **Nginx:**
    -   Added a `/storage/` location block to the Nginx configuration to correctly serve files linked from the `storage` directory.
-   **Dependencies:**
    -   Added `@radix-ui/react-select` to support new UI components.
-   **Testing:**
    -   Added comprehensive tests for the new `UserAvatar` component.
    -   Updated existing tests for `CatCard` and other components to align with the new data models and features.
    -   All 18 frontend tests are now passing.
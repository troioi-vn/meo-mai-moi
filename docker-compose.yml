name: meo-mai-moi
services:
  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    image: meomaimoi/backend
    ports:
      - "8000:80"
    env_file:
      - ./backend/.env.docker
    environment:
      # Disable migrations in entrypoint - deploy.sh handles migrations explicitly
      # to prevent race conditions and ensure proper sequencing with seeding/verification
      - RUN_MIGRATIONS=false
      - IGNORE_OPTIMIZE_CLEAR_FAILURE=true
    networks:
      - meo-mai-moi-network
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - uploads_data:/var/www/storage/app/public
      - logs_data:/var/www/storage/logs
    healthcheck:
      test:
        - CMD
        - curl
        - -f
        - http://localhost/api/version
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  db:
    image: postgres:14-alpine
    environment:
      POSTGRES_DB: meo_mai_moi
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    networks:
      - meo-mai-moi-network
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      # Use container env vars (escaped $ -> $$) so expansion happens inside container, not by compose
      test:
        - CMD-SHELL
        - PGUSER=$${POSTGRES_USER} PGPASSWORD=$${POSTGRES_PASSWORD} pg_isready -q -d $${POSTGRES_DB} -h 127.0.0.1 -p 5432 && PGPASSWORD=$${POSTGRES_PASSWORD} psql -U $$POSTGRES_USER -d $$POSTGRES_DB -h 127.0.0.1 -c 'SELECT 1'
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

networks:
  meo-mai-moi-network:
    driver: bridge

volumes:
  pgdata:
  uploads_data:
  logs_data:
